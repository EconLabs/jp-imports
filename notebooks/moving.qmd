---
title: "Moving price graph"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
from dotenv import load_dotenv
load_dotenv()
```

```{python}
from src.jp_imports.data_process import DataTrade
from src.jp_imports.data_pull import DataPull
from datetime import datetime
import polars as pl
import ibis

ibis.options.interactive = True

d = DataTrade(database_url="postgresql://postgres:password@localhost:5432/postgres", debug=True)
```

```{python}
time = "monthly"
types = "hts"
df2 = d.process_int_org(time, types)
df2
```



```{python}
df = df2
hts = d.conn.table("htstable").select("id","hts_code").rename(hts_id="id")
df = df.join(hts, "hts_id", how="left")
df = df.mutate(
  date=ibis.date(df.year.cast("string") + "-" + df.month.cast("string") + "-01"),
  qty_imports=df.qty_imports.substitute(0,1),
  qty_exports=df.qty_exports.substitute(0,1),
  hs4=df.hts_code[0:4]
)
df = df.group_by(["date","hs4"]).aggregate([
  df.imports.sum().name("imports"),
  df.exports.sum().name("exports"),
  df.qty_imports.sum().name("qty_imports"),
  df.qty_exports.sum().name("qty_exports")
  ]
)
df = df.mutate(
  price_imports=df.imports / df.qty_imports,
  price_exports=df.exports / df.qty_exports,
)
df = df.mutate(
  moving_price_imports=df.price_imports.mean().over(
    range=(-ibis.interval(months=2), 0),
    group_by=df.hs4,
    order_by=df.date,
  ),
  moving_price_exports=df.price_exports.mean().over(
    range=(-ibis.interval(months=2), 0),
    group_by=df.hs4,
    order_by=df.date,
  )
)
df = df.group_by('hs4').mutate(
  prev_year_imports=df.moving_price_imports.lag(12),
  prev_year_exports=df.moving_price_exports.lag(12),
  )
df = df.mutate(
    pct_change_imports=ibis.case()
        .when(df.prev_year_imports != 0, 
              (df.moving_price_imports - df.prev_year_imports) / df.prev_year_imports)
        .else_(ibis.null())
        .end(), 
    pct_change_exports=ibis.case()
        .when(df.prev_year_exports != 0, 
              (df.moving_price_exports - df.prev_year_exports) / df.prev_year_exports)
        .else_(ibis.null())
        .end()
)
df = df.mutate(
    moving_import_rank=ibis.case()
        .when(df.moving_price_imports.notnull(), ibis.dense_rank().over(
            order_by=df.moving_price_imports,
            group_by=df.date
        ) + 1)
        .else_(ibis.null())
        .end(),
    moving_export_rank=ibis.case()
       .when(df.moving_price_exports.notnull(), ibis.dense_rank().over(
            order_by=df.moving_price_exports,
            group_by=df.date
        ) + 1)
       .else_(ibis.null())
       .end(),
    pct_imports_rank=ibis.case()
       .when(df.pct_change_imports.notnull(), ibis.dense_rank().over(
            order_by=df.pct_change_imports,
            group_by=df.date
        ) + 1)
      .else_(ibis.null())
      .end(),
    pct_exports_rank=ibis.case()
      .when(df.pct_change_exports.notnull(), ibis.dense_rank().over(
            order_by=df.pct_change_exports,
            group_by=df.date
        ) + 1)
     .else_(ibis.null())
     .end(),
)

df
```

```{python}
df = df2.to_polars()
hts = d.conn.table("htstable").to_polars()
df = df.join(hts, left_on="hts_id", right_on="id")
df
```

```{python}
agged = clicks.select(
    _.user,
    one_hour_user_click_cnt=_.url.count().over(
        range=(-ibis.interval(hour=1), 0),
        group_by=_.user,
        order_by=_.click_time,
    ),
)
```