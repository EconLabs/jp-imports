---
title: "Agriculture processing"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
```

```{python}
import polars as pl
from src.data.data_process import DataTrade
import comtradeapicall
dt = DataTrade()
```

```{python}
df = dt.insert_int_org()
```

```{python}
codes = df.select(pl.col("hts_code").str.slice(0,2).unique()).to_series().to_list()
```

```{python}
empty_df = [
    pl.Series("refYear", [], dtype=pl.String),
    pl.Series("refMonth", [], dtype=pl.String),
    pl.Series("reporterCode", [], dtype=pl.String),
    pl.Series("reporterDesc", [], dtype=pl.String),
    pl.Series("flowCode", [], dtype=pl.String),
    pl.Series("flowDesc", [], dtype=pl.String),
    pl.Series("partnerDesc", [], dtype=pl.String),
    pl.Series("classificationCode", [], dtype=pl.String),
    pl.Series("cmdCode", [], dtype=pl.String),
    pl.Series("cmdDesc", [], dtype=pl.String),
    pl.Series("cifvalue", [], dtype=pl.String),
    pl.Series("fobvalue", [], dtype=pl.String),
    pl.Series("primaryValue", [], dtype=pl.String),
    pl.Series("netWgt", [], dtype=pl.String),
]

for year in range(2010, 2025):
    for month in range(1, 13):
        master_df = pl.DataFrame(empty_df)

        # Skip if file already exists
        if os.path.exists(f"data/raw/comtrade_{year}_{month}.csv"):
            continue
        # Skip if year is 2024 and month is >= 10
        if year == 2024 and month >= 10:
            continue

        for code in codes:
            print(f"Pulling data for {year}-{month} and for code {code}")
            mydf = comtradeapicall.previewFinalData(
                typeCode='C',
                freqCode='M',
                clCode='HS',
                period=f'{year}{str(month).zfill(2)}',
                reporterCode='',
                cmdCode=f'{code}',
                flowCode='X',
                partnerCode='584',
                partner2Code=None,
                customsCode=None,
                motCode=None,
                maxRecords=500,
                format_output='JSON',
                aggregateBy=None,
                breakdownMode=None,
                countOnly=None,
                includeDesc=True
            )

            if mydf.empty:
                print(f"No data returned for {year}-{month}, code: {code}")
                continue
            elif len(mydf) == 500:
                print(f"Error: {year}-{month} {code} returned 500 rows.")

            mydf = mydf[["refYear", "refMonth", "reporterCode", "reporterDesc", "flowCode", "flowDesc", "partnerDesc", "classificationCode", "cmdCode", "cmdDesc", "cifvalue", "fobvalue", 'primaryValue', 'netWgt']]
            tmp = pl.from_pandas(mydf).cast(pl.String)
            master_df = pl.concat([master_df, tmp], how="vertical")
            print(f"Processed {year}-{str(month).zfill(2)}, {len(tmp)} rows")

            # Wait for 15 minutes before continuing with the next request
            print("Waiting for 15 minutes before making the next request...")
            time.sleep(900) 

        master_df.write_csv(f"data/raw/comtrade_{year}_{month}.csv")
```


```{python}
year = 2010
iso =
mydf = comtradeapicall.previewFinalData(
                typeCode='C',
                freqCode='M',
                clCode='HS',
                period=f'{year}{str(month).zfill(2)}',
                reporterCode='',
                cmdCode=f'{code}',
                flowCode='X',
                partnerCode=iso,
                partner2Code=None,
                customsCode=None,
                motCode=None,
                maxRecords=500,
                format_output='JSON',
                aggregateBy=None,
                breakdownMode=None,
                countOnly=None,
                includeDesc=True
            )
mydf           
```
