---
title: "Agriculture processing"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
from dotenv import load_dotenv
load_dotenv()
```

```{python}
import polars as pl
import plotly.express as px
import requests
from src.jp_imports.data_process import DataProcess
from src.jp_imports.data_pull import DataPull
d = DataProcess("data/")
```


```{python}
# Existing code
time = "monthly"
types = "hs"
df = d.process_int_org(time, types, False)
df = df.with_columns(pl.col("imports_qty", "exports_qty").replace(0, 1))
df = df.with_columns(hs4=pl.col("hs").str.slice(0, 4))

df = df.group_by(pl.col("hs4", "month", "year")).agg(
    pl.col("imports").sum().alias("imports"),
    pl.col("exports").sum().alias("exports"), 
    pl.col("imports_qty").sum().alias("imports_qty"), 
    pl.col("exports_qty").sum().alias("exports_qty")
)

df = df.with_columns(
    price_imports=pl.col("imports") / pl.col("imports_qty"),
    price_exports=pl.col("exports") / pl.col("exports_qty")
)

df = df.with_columns(date=pl.datetime(pl.col("year"), pl.col("month"), 1))

# Sort the DataFrame by the date column
df = df.sort("date")

# Now you can safely use group_by_dynamic
result = df.group_by_dynamic("date", group_by="hs4", every="1m").agg(
    pl.col("price_imports").mean().alias("moving_price_imports"),
    pl.col("price_exports").mean().alias("moving_price_exports")
)
results = result.with_columns(
    pl.col("moving_price_imports").rank("ordinal").over("date").alias("rank_imports").cast(pl.Int64), 
    pl.col("moving_price_exports").rank("ordinal").over("date").alias("rank_exports").cast(pl.Int64)
    )
results = df.join(results, on=["date", "hs4"], how="left", validate="1:1")

# Assuming 'results' already has the necessary columns and is sorted by date and hs4
tmp = results.with_columns(
    pl.col("moving_price_imports").pct_change().over("date", "hs4").alias("pct_change_imports")
).sort(by=["date", "hs4"])

# To get the percentage change for the same month of the previous year
# First, create a column for the previous year's value
tmp = tmp.with_columns(
    pl.when(pl.col("date").dt.year() > 1)  # Ensure there's a previous year to compare
    .then(pl.col("moving_price_imports").shift(12))  # Shift by 12 months
    .otherwise(None)
    .alias("prev_year_imports"), 
)
tmp = tmp.with_columns(
    pl.when(pl.col("date").dt.year() > 1)  # Ensure there's a previous year to compare
    .then(pl.col("moving_price_exports").shift(12))  # Shift by 12 months
    .otherwise(None)
    .alias("prev_year_exports"), 
)
tmp = tmp.with_columns(
    pl.when(pl.col("date").dt.year() > 1)  # Ensure there's a previous year to compare
    .then(pl.col("rank_imports").shift(12))  # Shift by 12 months
    .otherwise(None)
    .alias("prev_year_rank_imports"), 
)
tmp = tmp.with_columns(
    pl.when(pl.col("date").dt.year() > 1)  # Ensure there's a previous year to compare
    .then(pl.col("rank_exports").shift(12))  # Shift by 12 months
    .otherwise(None)
    .alias("prev_year_rank_exports") 
)

# Now calculate the percentage change
tmp = tmp.with_columns(
    ((pl.col("moving_price_imports") - pl.col("prev_year_imports")) / pl.col("prev_year_imports")).alias("pct_change_imports_year_over_year"),
    ((pl.col("moving_price_exports") - pl.col("prev_year_exports")) / pl.col("prev_year_exports")).alias("pct_change_exports_year_over_year"),
    (pl.col("rank_imports") - pl.col("prev_year_rank_imports")).alias("rank_imports_change_year_over_year"),
    (pl.col("rank_exports").cast(pl.Int64) - pl.col("prev_year_rank_exports").cast(pl.Int64)).alias("rank_exports_change_year_over_year")
).sort(by=["date", "hs4"])
tmp = tmp.collect()

df2 = tmp.filter(pl.col("hs4") == "0202").sort("date")
# Plot the data
fig = px.line(df2, x="date", y="price_imports")
fig.show()
```

```{python}
df2
```

```{python}
df = pl.DataFrame(r)
names = df.select(pl.col("column_0")).transpose()
df = df.drop("column_0").transpose()
df = df.rename(names.to_dicts().pop()).sort(pl.col("CTY_NAME"))
df.filter(pl.col("STATE")== "PR")
```