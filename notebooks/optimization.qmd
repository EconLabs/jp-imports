---
title: "optimization"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
```

```{python}
import polars as pl
from plotly import express as px
#from src.jp_imports.data_process import DataProcess
```


```{python}
save_path = "data/"
df = DataProcess(saving_dir=save_path, instance="jp_instetute", debug=True).process_int_jp(time="yearly", types="total")
df
```

```{python}

process_data(df, switch=["yearly", "total"])
```

```{python}
# step 1: read
df1 = pl.read_parquet("data/raw/jp_instance.parquet")
df1 = process_int_jp("yearly", "total", df=df1)
df1
```

```{python}
df2 = pl.scan_parquet("data/raw/jp_instance.parquet")
df2 = process_int_jp("yearly", "naics", df=df2)
df2.collect()
```

```{python}
def process_int_jp(time:str, types:str, df, group:bool=False):
        switch = [time, types]

        df = df.with_columns(conv_1=pl.when(pl.col("unit_1").str.to_lowercase() == "kg").then(pl.col("qty_1") * 1)
                                        .when(pl.col("unit_1").str.to_lowercase() == "l").then(pl.col("qty_1") * 1)
                                        .when(pl.col("unit_1").str.to_lowercase() == "doz").then(pl.col("qty_1") / 0.756)
                                        .when(pl.col("unit_1").str.to_lowercase() == "m3").then(pl.col("qty_1") * 1560)
                                        .when(pl.col("unit_2").str.to_lowercase() == "t").then(pl.col("qty_1") * 907.185)
                                        .when(pl.col("unit_1").str.to_lowercase() == "kts").then(pl.col("qty_1") * 1)
                                        .when(pl.col("unit_1").str.to_lowercase() == "pfl").then(pl.col("qty_1") * 0.789)
                                        .when(pl.col("unit_1").str.to_lowercase() == "gm").then(pl.col("qty_1") * 1000).otherwise(None),

                            conv_2=pl.when(pl.col("unit_2").str.to_lowercase() == "kg").then(pl.col("qty_2") * 1)
                                        .when(pl.col("unit_2").str.to_lowercase() == "l").then(pl.col("qty_2") * 1)
                                        .when(pl.col("unit_2").str.to_lowercase() == "doz").then(pl.col("qty_2") / 0.756)
                                        .when(pl.col("unit_2").str.to_lowercase() == "m3").then(pl.col("qty_2") * 1560)
                                        .when(pl.col("unit_2").str.to_lowercase() == "t").then(pl.col("qty_2") * 907.185)
                                        .when(pl.col("unit_2").str.to_lowercase() == "kts").then(pl.col("qty_2") * 1)
                                        .when(pl.col("unit_2").str.to_lowercase() == "pfl").then(pl.col("qty_2") * 0.789)
                                        .when(pl.col("unit_2").str.to_lowercase() == "gm").then(pl.col("qty_2") * 1000)
                                        .otherwise(None).alias("converted_qty_2"),

                            qrt=pl.when((pl.col("Month") >= 1) & (pl.col("Month") <= 3)).then(1)
                                        .when((pl.col("Month") >= 4) & (pl.col("Month") <= 8)).then(2)
                                        .when((pl.col("Month") >= 7) & (pl.col("Month") <= 9)).then(3)
                                        .when((pl.col("Month") >= 10) & (pl.col("Month") <= 12)).then(4),

                            fiscal_year=pl.when(pl.col("Month") > 6).then(pl.col("Year") + 1)
                                          .otherwise(pl.col("Year")).alias("fiscal_year")
                                          ).rename({"Year": "year", "Month": "month", "Country": "country", "Commodity_Code": "hs"}
                                          ).with_columns(hs=pl.col("hs").cast(pl.String).str.zfill(10)
                                          ).filter(pl.col("naics") != "RETURN")
        if group:
            return process_cat(df, switch)
        else:
            return process_data(df=df, switch=["yearly", "total"])
```

```{python}
def process_data(df:pl.DataFrame, switch:list) -> pl.DataFrame:

        match switch:
            case ["yearly", "total"]:

                df = filter_data(df, ["year"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year"))
                      ).select(pl.col("*").exclude("year_right")
                      ).with_columns(pl.col("imports", "exports").fill_null(strategy="zero")
                      ).sort("year").with_columns(net_exports=pl.col("exports")-pl.col("imports"))
                return df

            case ["yearly", "naics"]:
                df = filter_data(df, ["year", "naics"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    naics=pl.when(pl.col("naics").is_null()).then(pl.col("naics_right")).otherwise(pl.col("naics")))
                df = df.select(pl.col("*").exclude("year_right", "naics_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "naics")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["yearly", "hs"]:
                df = filter_data(df, ["year", "hs"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                            hs=pl.when(pl.col("hs").is_null()).then(pl.col("hs_right")).otherwise(pl.col("hs")))
                df = df.select(pl.col("*").exclude("year_right", "hs_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "hs")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["yearly", "country"]:
                df = filter_data(df, ["year", "country"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    country=pl.when(pl.col("country").is_null()).then(pl.col("country_right")).otherwise(pl.col("country")))
                df = df.select(pl.col("*").exclude("year_right", "country_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "country")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["fiscal", "total"]:
                df = filter_data(df, ["fiscal_year"])
                df = df.with_columns(fiscal_year=pl.when(pl.col("fiscal_year").is_null()).then(pl.col("fiscal_year_right")).otherwise(pl.col("fiscal_year")))
                df = df.select(pl.col("*").exclude("fiscal_year_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("fiscal_year")
                df = df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["fiscal", "naics"]:
                df = filter_data(df, ["fiscal_year", "naics"])
                df = df.with_columns(fiscal_year=pl.when(pl.col("fiscal_year").is_null()).then(pl.col("fiscal_year_right")).otherwise(pl.col("fiscal_year")),
                                    naics=pl.when(pl.col("naics").is_null()).then(pl.col("naics_right")).otherwise(pl.col("naics")))
                df = df.select(pl.col("*").exclude("fiscal_year_right", "naics_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("fiscal_year", "naics")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["fiscal", "hs"]:
                df = filter_data(df, ["fiscal_year", "hs"])
                df = df.with_columns(fiscal_year=pl.when(pl.col("fiscal_year").is_null()).then(pl.col("fiscal_year_right")).otherwise(pl.col("fiscal_year")),
                                    hs=pl.when(pl.col("hs").is_null()).then(pl.col("hs_right")).otherwise(pl.col("hs")))
                df = df.select(pl.col("*").exclude("fiscal_year_right", "hs_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("fiscal_year", "hs")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["fiscal", "country"]:
                df = filter_data(df, ["fiscal_year", "country"])
                df = df.with_columns(fiscal_year=pl.when(pl.col("fiscal_year").is_null()).then(pl.col("fiscal_year_right")).otherwise(pl.col("fiscal_year")),
                                    country=pl.when(pl.col("country").is_null()).then(pl.col("country_right")).otherwise(pl.col("country")))
                df = df.select(pl.col("*").exclude("fiscal_year_right", "country_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("fiscal_year", "country")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["qrt", "total"]:
                df = filter_data(df, ["year", "qrt"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    qrt=pl.when(pl.col("qrt").is_null()).then(pl.col("qrt_right")).otherwise(pl.col("qrt")))
                df = df.select(pl.col("*").exclude("year_right", "qrt_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "qrt")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["qrt", "naics"]:
                df = filter_data(df, ["year", "qrt", "naics"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    qrt=pl.when(pl.col("qrt").is_null()).then(pl.col("qrt_right")).otherwise(pl.col("qrt")),
                                    naics=pl.when(pl.col("naics").is_null()).then(pl.col("naics_right")).otherwise(pl.col("naics")))
                df = df.select(pl.col("*").exclude("year_right", "qrt_right", "naics_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "qrt", "naics")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["qrt", "hs"]:
                df = filter_data(df, ["year", "qrt", "hs"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    qrt=pl.when(pl.col("qrt").is_null()).then(pl.col("qrt_right")).otherwise(pl.col("qrt")),
                                    hs=pl.when(pl.col("hs").is_null()).then(pl.col("hs_right")).otherwise(pl.col("hs")))
                df = df.select(pl.col("*").exclude("year_right", "qrt_right", "hs_right"))
                df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "qrt", "hs")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["qrt", "country"]:
                df = filter_data(df, ["year", "qrt", "country"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    qrt=pl.when(pl.col("qrt").is_null()).then(pl.col("qrt_right")).otherwise(pl.col("qrt")),
                                    country=pl.when(pl.col("country").is_null()).then(pl.col("country_right")).otherwise(pl.col("country")))
                df = df.select(pl.col("*").exclude("year_right", "qrt_right", "country_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "qrt", "country")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["monthly", "total"]:
                df = filter_data(df, ["year", "month"])
                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    month=pl.when(pl.col("month").is_null()).then(pl.col("month_right")).otherwise(pl.col("month")))
                df = df.select(pl.col("*").exclude("year_right", "month_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "month")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case ["monthly", "naics"]:
                df = filter_data(df, ["year", "month", "naics"])

                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    month=pl.when(pl.col("month").is_null()).then(pl.col("month_right")).otherwise(pl.col("month")),
                                    naics=pl.when(pl.col("naics").is_null()).then(pl.col("naics_right")).otherwise(pl.col("naics")))
                df = df.select(pl.col("*").exclude("year_right", "month_right", "naics_right"))
                return df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "month", "naics")

            case ["monthly", "hs"]:
                df = filter_data(df, ["year", "month", "hs"])

                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    month=pl.when(pl.col("month").is_null()).then(pl.col("month_right")).otherwise(pl.col("month")),
                                    hs=pl.when(pl.col("hs").is_null()).then(pl.col("hs_right")).otherwise(pl.col("hs")))
                df = df.select(pl.col("*").exclude("year_right", "month_right", "hs_right"))
                return df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "month", "hs")

            case ["monthly", "country"]:
                df = filter_data(df, ["year", "month", "country"])

                df = df.with_columns(year=pl.when(pl.col("year").is_null()).then(pl.col("year_right")).otherwise(pl.col("year")),
                                    month=pl.when(pl.col("month").is_null()).then(pl.col("month_right")).otherwise(pl.col("month")),
                                    country=pl.when(pl.col("country").is_null()).then(pl.col("country_right")).otherwise(pl.col("country")))
                df = df.select(pl.col("*").exclude("year_right", "month_right", "country_right"))
                df = df.with_columns(pl.col("imports", "exports").fill_null(strategy="zero")).sort("year", "month", "country")
                return df.with_columns(net_exports=pl.col("exports")-pl.col("imports"))

            case _:
                raise ValueError(f"Invalid switch: {switch}")
```

```{python}
def filter_data(df:pl.DataFrame, filter:list) -> pl.DataFrame:
        imports = df.filter(pl.col("Trade") == "i").group_by(filter).agg(
            pl.sum("data").alias("imports")).sort(filter)
        exports = df.filter(pl.col("Trade") == "e").group_by(filter).agg(
            pl.sum("data").alias("exports")).sort(filter)

        return imports.join(exports, on=filter, how="full", validate="1:1")

```